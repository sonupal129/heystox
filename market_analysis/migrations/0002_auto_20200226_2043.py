# Generated by Django 2.2.5 on 2020-02-26 20:43

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion

def create_market_indicator(apps, schema_editor):
    indicators = ["MACD", "STOCHASTIC", "PDHL", "OHL", "LONGSHORT"]
    Indicator = apps.get_model("market_analysis", "Indicator")
    counter = 0
    for i in indicators:
        try:
            indi = Indicator.objects.get(name=i)
        except:
            indi = Indicator.objects.create(name=i, value=counter)
            counter += 1

def create_master_contract(apps, schema_editor):
    contracts = ["NSE_EQ", "NSE_INDEX"]
    MasterContract = apps.get_model("market_analysis", "MasterContract")
    for contract in contracts:
        MasterContract.objects.get_or_create(name=contract)


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('market_analysis', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('value', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MarketHoliday',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField()),
                ('holiday_type', models.CharField(choices=[('PU', 'Public Holiday')], default='PU', max_length=15)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SortedStockDashboardReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('entry_time', models.DateTimeField(blank=True, null=True)),
                ('exit_time', models.DateTimeField(blank=True, null=True)),
                ('entry_type', models.CharField(blank=True, max_length=10, null=True)),
                ('entry_price', models.FloatField(blank=True, null=True)),
                ('exit_price', models.FloatField(blank=True, null=True)),
                ('current_price', models.FloatField(blank=True, null=True)),
                ('pl', models.FloatField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SortedStocksList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('entry_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('entry_type', models.CharField(choices=[('SS', 'SIDEWAYS_SELL'), ('SB', 'SIDEWAYS_BUY'), ('SELL', 'SELL'), ('BUY', 'BUY')], default='BUY', max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('mobile', models.IntegerField(blank=True, null=True)),
                ('bearable_loss', models.IntegerField(blank=True, default=0, verbose_name='Bearable loss in percent')),
                ('expected_profit', models.IntegerField(blank=True, default=0, verbose_name='Expected profit in percent')),
                ('for_trade', models.BooleanField(default=False)),
                ('subscribed_historical_api', models.BooleanField(default=False)),
                ('subscribed_live_api', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Symbol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('token', models.IntegerField(blank=True, null=True)),
                ('symbol', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('last_day_closing_price', models.FloatField(blank=True, null=True)),
                ('last_day_opening_price', models.FloatField(blank=True, null=True)),
                ('tick_size', models.FloatField(blank=True, null=True)),
                ('instrument_type', models.CharField(blank=True, max_length=20, null=True)),
                ('isin', models.CharField(max_length=50)),
                ('last_day_vtt', models.IntegerField(blank=True, null=True, verbose_name='Last Day Traded Volume')),
                ('vtt', models.IntegerField(blank=True, null=True, verbose_name='Total Traded Volume')),
                ('total_buy_quantity', models.IntegerField(blank=True, null=True, verbose_name='Total Buy Quantity')),
                ('total_sell_quantity', models.IntegerField(blank=True, null=True, verbose_name='Total Sell Quantity')),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='symbols', to='market_analysis.MasterContract')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StrategyTimestamp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('timestamp', models.DateTimeField()),
                ('diff', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='market_analysis.Indicator')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timestamps', to='market_analysis.SortedStocksList')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sortedstockslist',
            name='symbol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sorted_stocks', to='market_analysis.Symbol'),
        ),
        migrations.CreateModel(
            name='PreMarketOrderData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('sector', models.CharField(choices=[('NFTY', 'Nifty'), ('NFTYBNK', 'Nifty Bank')], default='NFTYBNK', max_length=20)),
                ('open_price', models.FloatField(blank=True, null=True)),
                ('change', models.FloatField(blank=True, null=True)),
                ('change_percent', models.FloatField(blank=True, null=True)),
                ('previous_close', models.FloatField(blank=True, null=True)),
                ('buy_qty_ato', models.IntegerField(blank=True, null=True)),
                ('sell_qty_ato', models.IntegerField(blank=True, null=True)),
                ('total_buy_qty', models.IntegerField(blank=True, null=True)),
                ('total_sell_qty', models.IntegerField(blank=True, null=True)),
                ('total_trade_qty', models.IntegerField(blank=True, null=True)),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pre_market', to='market_analysis.Symbol')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Earning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField()),
                ('opening_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('profit_loss', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Profit & Loss')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='earnings', to='market_analysis.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Credentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('api_key', models.CharField(blank=True, max_length=150, null=True)),
                ('secret_key', models.CharField(blank=True, max_length=150, null=True)),
                ('access_token', models.CharField(blank=True, max_length=200, null=True)),
                ('user_profile', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='credential', to='market_analysis.UserProfile')),
            ],
            options={
                'verbose_name_plural': 'Credentials',
            },
        ),
        migrations.CreateModel(
            name='Candle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('candle_type', models.CharField(choices=[('M5', '5 Minute'), ('M60', '60 Minute'), ('M10', '10 Minute'), ('M15', '15 Minute'), ('1D', '1 Day')], default=None, max_length=50, null=True)),
                ('open_price', models.FloatField(blank=True, null=True, verbose_name='Candle Open Price')),
                ('high_price', models.FloatField(blank=True, null=True, verbose_name='Candle High Price')),
                ('low_price', models.FloatField(blank=True, null=True, verbose_name='Candle Low Price')),
                ('close_price', models.FloatField(blank=True, null=True, verbose_name='Candle Close Price')),
                ('volume', models.IntegerField(blank=True, null=True, verbose_name='Volume')),
                ('atp', models.IntegerField(blank=True, null=True, verbose_name='Average Traded Price')),
                ('total_buy_quantity', models.IntegerField(blank=True, null=True, verbose_name='Total Buy Quantity')),
                ('total_sell_quantity', models.IntegerField(blank=True, null=True, verbose_name='Total Sell Quantity')),
                ('lower_circuit', models.IntegerField(blank=True, null=True, verbose_name='Lower Circuit Price')),
                ('upper_circuit', models.IntegerField(blank=True, null=True, verbose_name='Upper Circuit Price')),
                ('bids', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('asks', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('date', models.DateTimeField()),
                ('symbol', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candles', to='market_analysis.Symbol')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BankDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('bank_name', models.CharField(max_length=200)),
                ('bank_account_number', models.CharField(max_length=50)),
                ('initial_balance', models.DecimalField(decimal_places=2, help_text='Initial balance at the starting of month', max_digits=10)),
                ('current_balance', models.DecimalField(decimal_places=2, max_digits=10)),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bank', to='market_analysis.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(create_market_indicator),
        migrations.RunPython(create_master_contract),
    ]
